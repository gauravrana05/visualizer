"use client"
import Image from "next/image";
import MaxWidthWrapper from "@/components/MaxWidthWrapper";
import { Button, buttonVariants } from "@/components/ui/button";
import Link from "next/link";
import { useEffect, useState } from "react";
export default function Home() {

  const [arr, setArr] = useState<number[]>([]);
  // const [primeList, setPrimeList] = useState<string>('');
  // const [step, setStep] = useState<string>('');
  // const [isStartButtonDisabled, setIsStartButtonDisabled] = useState<boolean>(false);
  const height = window.innerHeight;
  const width = window.innerWidth;

  useEffect(() => {
    setGrid();
  }, [])


  function setGrid() {
    const table = document.getElementById("table");
    const height = window.innerHeight;
    const width = window.innerWidth;
    if (table)
      table.innerHTML = '';
    for (let i = 0; i < 20; i++) {
      let tr = document.createElement('tr');
      for (let j = 0; j < 20; j++) {
        let td = document.createElement('td');
        td.id = (20 * i + j + 1).toString();
        td.setAttribute('height', (height / 20).toString());
        td.setAttribute('width', (width / 20).toString());
        td.textContent = td.id;
        tr.appendChild(td);
      }

    }
  }
  function setPrime(id: Number): void {
    const element = document.getElementById(id.toString());
    if (element) {
      element.style.backgroundColor = 'green';
    }
  }

  function setNonPrime(id: Number): void {
    const element = document.getElementById(id.toString());
    if (element) {
      element.style.backgroundColor = 'red';
    }
  }

  async function setNonPrimePromise(arr1: number[]): Promise<void> {
    if (arr1[0] < 400) {
      return new Promise((resolve, reject) => {
        arr[arr1[0]] = 0;
        setNonPrime(arr1[0]);
        setTimeout(() => {
          resolve(arr1);
        }, 100);
      }).then(() => {
        arr1[0] += arr1[1];
        return setNonPrimePromise(arr1);
      })

    }
    else {
      return setPrimePromise(arr1[1] + 1);
    }
  }
  function setPrimePromise(i: number): Promise<void> {
    const step = document.getElementById('step');
    const prime = document.getElementById('prime');
    if (i < 400 && arr[i]) {
      return new Promise((resolve, reject) => {
        if (step)
          step.innerHTML = `'Step : ' + ${i} + ' is still white so it is prime and set to green ,all its multiple set to red'`;
        if (prime)
          prime.append(' ' + i + ' ');
        setPrime(i);
        setTimeout(() => {
          setNonPrimePromise([i + i, i])
        }, 500);
      })
    }
    else if (i <= 400) {
      if (step)
        step.innerHTML = `'Step : '+ ${i} +' is red so it is non-prime'`;
      setTimeout(() => { setPrimePromise(i + 1) }, 1000);
      return Promise.resolve();
    }
    else {
      return Promise.resolve();
    }
  }

  const start = document.getElementById('start');
  const reset = document.getElementById('reset');

  const handleStartClick = () => {

    const step = document.getElementById('step');
    const prime = document.getElementById('prime');
    setNonPrime(1);
    start?.setAttribute('disabled', 'true');
    if (step)
      step.innerHTML = `Step: 1 is not prime  it is set RED`;
    if (prime)
      prime.innerHTML = `Prime : `;
    setTimeout(() => {
      setPrimePromise(2);
    }, 1000);

  }
  const handleResetClick = () => {
    location.reload();
  }

  return (
    <MaxWidthWrapper className="h-full w-full bg-white soe-wrapper">
      <div className=" py-100 w-full mx-auto text-center flex flex-col lg:flex-row items-cetner">
        <div className="soe-algo w-full lg:w-[50%] flex items-start flex-col p-4" >
          <h1 className="font-bold justify-start text-2xl my-6 items-start">Sieve of Eratosthenes</h1>
          <p className="text-sm text-start">
            Sieve of Eratosthenes is a famous simple algorithm use to find all the primes nos. upto certain limit.
          </p>
          <h3 className="font-bold text-xl">Algorithm:</h3>
          <ol className="text-sm text-start">
            <li className="text-xs">
              Intialize an array of size n with all the values 1(where n is limit upto which prime number needed).
            </li>
            <li className="py-2">
              Set <span className="font-bold">arr[0]</span> and <span className="font-bold">arr[1]</span> as 0 as they are not prime.
            </li>
            <li className=" text-red-800">
              Intialize i as 2.
            </li>
            <li>
              <span className="font-bold">
                While i*i is less than equal to n.
              </span>
              <ol type="A" className="ml-4">
                <li>If arr[i]==1
                  <ol type="i" className="ml-4">
                    <li>Intialize j to i+i</li>
                    <li>while j is less than equal to n
                      <ol type="I">
                        <li>arr[j]=0</li>
                        <li>j=j+i</li>
                      </ol>
                    </li>
                  </ol>
                </li>
                <li>i=i+1</li>
              </ol>
            </li>
          </ol>
          <div className="flex py-5 gap-4 sm:gap-10 w-full ">

            <Button id="start" variant="default" className="font-bold" onClick={handleStartClick}>Start Visulaization</Button>
            <br />
            <br />
            <Button id="reset" variant="destructive" className="font-bold" onClick={handleResetClick}>Reset</Button>
          </div>
          <br />
          <br />
          <p id="step"></p>
          <div id="prime"></div>

        </div>
        <div className="table-wrapper w-full lg:w-[50%] bg-red-800 h-[100vh]">
          <table id="table"></table>
        </div>

      </div>
    </MaxWidthWrapper >
  );
}
